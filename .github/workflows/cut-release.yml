name: New Release

on:
  workflow_dispatch:
    # inputs:
    # kind:
    #   type: choice
    #   required: true
    #   description: "Type of the release (major, minor, or patch)"
    #   options:
    #     - major
    #     - minor
    #     - patch
    # update_required_lib_version:
    #   type: boolean
    #   description: "Require the library version to match the release version"

defaults:
  run:
    shell: bash --noprofile --norc -x -eo pipefail {0}

permissions:
  contents: write
  pull-requests: write

jobs:
  cut-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: "Checkout dependencies (nats.c.deps)"
        uses: actions/checkout@v3
        with:
          repository: nats-io/nats.c.deps
          path: deps

      - name: Gather version information
        id: version
        run: |
          MAJOR=$(grep "set(NATS_VERSION_MAJOR" CMakeLists.txt | awk -F'[ )]' '{print $3}')
          MINOR=$(grep "set(NATS_VERSION_MINOR" CMakeLists.txt | awk -F'[ )]' '{print $3}')
          PATCH=$(grep "set(NATS_VERSION_PATCH" CMakeLists.txt | awk -F'[ )]' '{print $3}')
          RELEASE_BRANCH="release/v${MAJOR}.${MINOR}"
          RELEASE_PR_BRANCH=${RELEASE_BRANCH}-pr-${{github.sha}}

          echo "patch=$PATCH" >> $GITHUB_OUTPUT
          echo "release_branch=${RELEASE_BRANCH}" >> $GITHUB_OUTPUT
          echo "release_pr_branch=${RELEASE_PR_BRANCH}" >> $GITHUB_OUTPUT
          echo "version=v${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_OUTPUT

          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "PATCH=$PATCH" >> $GITHUB_ENV
          echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_ENV
          echo "RELEASE_PR_BRANCH=$RELEASE_PR_BRANCH" >> $GITHUB_ENV
          echo "VERSION=v${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_ENV

      - name: Make ${{steps.version.outputs.release_branch}} branch
        if: steps.version.outputs.patch == '0'
        run: |
          git checkout -b ${RELEASE_BRANCH}
          git push origin ${RELEASE_BRANCH}

      - name: Use existing ${{steps.version.outputs.release_branch}} branch
        if: steps.version.outputs.patch != '0'
        run: |
          if [[ "${{github.ref_name}}" != "${RELEASE_BRANCH}" ]]; then
            echo "ERROR: You are trying to cut a patch release $VERSION from branch ${{github.ref_name}}. A patch release must be cut from an existing release branch."
            exit 1
          fi

      - name: Configure local git
        run: |
          git config --global user.name 'cut-release for ${{github.actor}}'
          git config --global user.email '${{github.actor}}@users.noreply.github.com'

      - name: Remove "beta" from version
        run: |
          sed -i -E 's/^set\(NATS_VERSION_SUFFIX.*$/set(NATS_VERSION_SUFFIX "")/g' CMakeLists.txt
          grep "set(NATS_VERSION_" CMakeLists.txt

      - name: Update NATS_VERSION_REQUIRED_NUMBER if not a patch release
        if: steps.version.outputs.patch == '0'
        run: |
          major_hex=$(printf "%02x" $MAJOR)
          echo ${major_hex}
          minor_hex=$(printf "%02x" $MINOR)
          echo ${minor_hex}
          regexp='^set\(NATS_VERSION_REQUIRED_NUMBER.*$'
          sed -i -E "s/$regexp/set(NATS_VERSION_REQUIRED_NUMBER 0x${major_hex}${minor_hex}00)/g" CMakeLists.txt
          grep "set(NATS_VERSION_" CMakeLists.txt

      - name: Rebuild with updated version
        run: |
          mkdir -p build
          cd build
          cmake .. -DNATS_PROTOBUF_DIR=${{ github.workspace }}/deps/pbuf -DNATS_UPDATE_DOC=ON -DNATS_UPDATE_VERSION=ON
          make
          cd ..
          rm -rf deps
          git status

      - name: Generate the docs
        run: |
          sudo apt-get -q update
          sudo apt-get -y install doxygen
          cd doc
          doxygen DoxyFile.NATS.Client
          git add html
          git status

      - name: Prepare the release PR
        uses: peter-evans/create-pull-request@v3
        with:
          title: "Release ${{steps.version.outputs.version}}"
          commit-message: "Updated version to ${{steps.version.outputs.version}}"
          branch: ${{steps.version.outputs.release_pr_branch}}
          body: |
            This PR was automatically generated by the cut-release.
            When it is merged, it will publish the release to GitHub, etc.
          milestone: ${{steps.version.outputs.version}}
          labels: release

