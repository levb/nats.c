name: New Release

on:
  workflow_dispatch:
    inputs:
      kind:
        type: choice
        required: true
        description: "Type of the release (major, minor, or patch)"
        options:
          - major
          - minor
          - patch
      update_required_lib_version:
        type: boolean
        description: "Require the library version to match the release version"

defaults:
  run:
    shell: bash --noprofile --norc -x -eo pipefail {0}

permissions:
  contents: write
  pull-requests: write

jobs:
  cut-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Gather version information
        id: version
        run: |
          MAJOR=$(grep "set(NATS_VERSION_MAJOR" CMakeLists.txt | awk -F'[ )]' '{print $3}')
          MINOR=$(grep "set(NATS_VERSION_MINOR" CMakeLists.txt | awk -F'[ )]' '{print $3}')
          PATCH=$(grep "set(NATS_VERSION_PATCH" CMakeLists.txt | awk -F'[ )]' '{print $3}')
          RELEASE_BRANCH="release/v${MAJOR}.${MINOR}" >> $GITHUB_ENV

          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT
          echo "release_branch=release/v${MAJOR}.${MINOR}" >> $GITHUB_OUTPUT
          echo "version=v${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_OUTPUT

          echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_ENV
          echo "VERSION=v${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_ENV

      - name: Make ${{steps.version.outputs.release_branch}} branch
        if: inputs.kind != 'patch'
        run: |
          git checkout -b ${RELEASE_BRANCH}
          git push origin ${RELEASE_BRANCH}

      - name: Use existing ${{steps.version.outputs.release_branch}} branch
        if: inputs.kind == 'patch'
        run: |
          if [[ "${{github.ref_name}}" != "${RELEASE_BRANCH}" ]]; then
            echo "ERROR: You are trying to cut a patch release $VERSION from branch ${{github.ref_name}}. A patch release must be cut from an existing release branch."
            exit 1
          fi

      - name: Remove "beta" from version
        run: |
          sed -i -E 's/^set\(NATS_VERSION_SUFFIX.*$/set(NATS_VERSION_SUFFIX "")/g' CMakeLists.txt
          grep "set(NATS_VERSION_" CMakeLists.txt
          git commit -am "(cut-release) Removed 'beta' from version"

      - name: build release
        uses: ./.github/workflows/build-release.yml
        # with:
        #   ref: release/v${major}.${minor}.0

      - name: FINAL
        run: echo "FINAL"
